# configuration defaults

CaseChecker {
  cases {
    camelCase:              "[a-z][a-z0-9]*(?:[A-Z0-9]+[a-z0-9]*)*"
    PascalCase:             "[A-Z]+[a-z0-9]*(?:[A-Z0-9]+[a-z0-9]*)*"
    snake_case:             "[a-z][a-z0-9]*(?:_[a-z0-9]+)*"
    SCREAMING_SNAKE_CASE:   "[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*"
    kebab-case:             "[a-z][a-z0-9]*(?:-[a-z0-9]+)*"
    COBOL-CASE:             "[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)*"
    hyphenated-Camel-Case:  "[a-z][a-z0-9]*(?:-[A-Z0-9]+[a-z0-9]*)*"
    Hyphenated-Pascal-Case: "[A-Z]+[a-z0-9]*(?:-[A-Z0-9]+[a-z0-9]*)*"
    Title Case:              "([A-Z][^\\s]*\\s?)+"
  }
  pathSegments {
    allow: [
      ${CaseChecker.cases.kebab-case}
    ]
  }
  propertyNames {
    allow: [
      ${CaseChecker.cases.camelCase},
      _links
    ]
  }
  pathParameterNames {
    allow: [
      ${CaseChecker.cases.kebab-case},
      ${CaseChecker.cases.snake_case}
    ]
  }
  queryParameterNames {
    allow: [
      ${CaseChecker.cases.camelCase}
    ]
  }
  headerNames {
    allow: [
      ${CaseChecker.cases.Hyphenated-Pascal-Case}
    ]
  }
  tagNames {
    allow: [
      ${CaseChecker.cases.camelCase},
      ${CaseChecker.cases.Title Case}
    ]
  }
  discriminatorValues {
    allow: [
      ${CaseChecker.cases.snake_case}
    ]
  }
  enumValues {
    allow: [
      ${CaseChecker.cases.snake_case}
    ]
  }
}

StringPropertyLengthBoundsRule {
  formatWhitelist: [ date, date-time, uuid, ipv4, ipv6 ]
  patternImpliesLimits: true
}

# configuration defaults

CaseChecker {
  cases {
    camelCase:              "[a-z][a-z0-9]*(?:[A-Z0-9]+[a-z0-9]*)*"
    PascalCase:             "[A-Z]+[a-z0-9]*(?:[A-Z0-9]+[a-z0-9]*)*"
    snake_case:             "[a-z][a-z0-9]*(?:_[a-z0-9]+)*"
    SCREAMING_SNAKE_CASE:   "[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*"
    kebab-case:             "[a-z][a-z0-9]*(?:-[a-z0-9]+)*"
    COBOL-CASE:             "[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)*"
    hyphenated-Camel-Case:  "[a-z][a-z0-9]*(?:-[A-Z0-9]+[a-z0-9]*)*"
    Hyphenated-Pascal-Case: "[A-Z]+[a-z0-9]*(?:-[A-Z0-9]+[a-z0-9]*)*"
    Title Case:              "([A-Z][^\\s]*\\s?)+"
  }
  pathSegments {
    allow: [
      ${CaseChecker.cases.kebab-case}
    ]
  }
  propertyNames {
    allow: [
      ${CaseChecker.cases.camelCase},
      _links
    ]
  }
  pathParameterNames {
    allow: [
      ${CaseChecker.cases.kebab-case},
      ${CaseChecker.cases.snake_case}
    ]
  }
  queryParameterNames {
    allow: [
      ${CaseChecker.cases.camelCase}
    ]
  }
  headerNames {
    allow: [
      ${CaseChecker.cases.Hyphenated-Pascal-Case}
    ]
  }
  tagNames {
    allow: [
      ${CaseChecker.cases.camelCase},
      ${CaseChecker.cases.Title Case}
    ]
  }
  discriminatorValues {
    allow: [
      ${CaseChecker.cases.snake_case}
    ]
  }
  enumValues {
    allow: [
      ${CaseChecker.cases.snake_case}
    ]
  }
}

StringPropertyLengthBoundsRule {
  formatWhitelist: [ date, date-time, uuid, ipv4, ipv6 ]
  patternImpliesLimits: true
}

OpenApiVersionRule {
  openApiVersions: [ 3.0.3, 3.0.4 ]
}

ExtraRuleAnnotations {
    default {
        MUST {
            effortMinutes: 30
            type: BUG
        }
        SHOULD {
            effortMinutes: 20
            type: CODE_SMELL
        }
        MAY {
            effortMinutes: 10
            type: CODE_SMELL
        }
        HINT {
            effortMinutes: 5
            type: CODE_SMELL
        }
    }
    rules: {
        B003 {
         effortMinutes: 100
         type: BUG
        }
    }
}

InfoBlockTagsChecker {
  productTags: ["Retail", "Business", "Wealth", "Identity", "Foundation", "Basic Support", "Flow"]
  informativeTags: ["Mobile", "Security", "Payments", "Authentication", "Employee", "Cash", "Insights"]
}

InfoBlockDescriptionChecker {
  maxDescriptionLength: 140
}

InfoBlockTitleChecker {
  maxTitleLength: 35
}

PrefixPathRule {
  validPathPrefixes: ["client-api", "service-api", "integration-api"]
}

NoReservedWordsChecker {
  jsReservedWords: ["abstract","await","boolean","break","byte","case","catch","char","class","const","continue","debugger","default","delete","do","double","else","enum","export","extends","false","final","finally","float","for","formParams","function","goto","headerParams","if","implements","import","in","instanceof","int","interface","let","long","native","new","null","package","private","protected","public","queryParameters","requestOptions","return","short","static","super","switch","synchronized","this","throw","transient","true","try","typeof","useFormData","var","varLocalDeferred","varLocalPath","void","volatile","while","with","yield"]
  springReservedWords: ["abstract","apiclient","apiexception","apiresponse","assert","boolean","break","byte","case","catch","char","class","configuration","const","continue","default","do","double","else","enum","extends","final","finally","float","for","goto","if","implements","import","instanceof","int","interface","localreturntype","localvaraccept","localvaraccepts","localvarauthnames","localvarcollectionqueryparams","localvarcontenttype","localvarcontenttypes","localvarcookieparams","localvarformparams","localvarheaderparams","localvarpath","localvarpostbody","localvarqueryparams","long","native","new","null","object","package","private","protected","public","return","short","static","strictfp","stringutil","super","switch","synchronized","this","throw","throws","transient","try","void","volatile","while"]
  kotlinReservedWords: ["as","break","class","continue","do","else","false","for","fun","if","in","interface","is","null","object","package","return","super","this","throw","true","try","typealias","typeof","val","var","when","while"]
  swiftReservedWords: ["#available","#colorLiteral","#column","#else","#elseif","#endif","#file","#fileLiteral","#function","#if","#imageLiteral","#line","#selector","#sourceLocation","Any","AnyObject","Array","Bool","COLUMN","Character","Class","ClosedRange","Codable","CountableClosedRange","CountableRange","Data","Decodable","Dictionary","Double","Encodable","Error","ErrorResponse","FILE","FUNCTION","Float","Float32","Float64","Float80","Int","Int16","Int32","Int64","Int8","LINE","OptionSet","Optional","Protocol","Range","Response","Self","Set","StaticString","String","Type","UInt","UInt16","UInt32","UInt64","UInt8","URL","Unicode","Void","_","as","associatedtype","associativity","break","case","catch","class","continue","convenience","default","defer","deinit","didSet","do","dynamic","dynamicType","else","enum","extension","fallthrough","false","fileprivate","final","for","func","get","guard","if","import","in","indirect","infix","init","inout","internal","is","lazy","left","let","mutating","nil","none","nonmutating","open","operator","optional","override","postfix","precedence","prefix","private","protocol","public","repeat","required","rethrows","return","right","self","set","static","struct","subscript","super","switch","throw","throws","true","try","typealias","unowned","var","weak","where","while","willSet"]
}

PluralizeResourceNamesRuleTest {
  whitelist:[
    /portal/
  ]
}


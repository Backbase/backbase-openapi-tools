openapi: 3.0.3
info:
  title: Wallet Test Service API
  description: "No description available\n# Disclaimer\n                        This\
    \ API is converted from RAML1.0 using the boat-maven-plugin.\n# Changelog\n##\
    \ 1.1.0-SNAPSHOT - 1.1.0-SNAPSHOT\n**Note:** API has incompatible changes!!\n\
    #### What's New\n---\n\n##### `GET` /integration-api/v1/items\n\n> Retrieve list\
    \ of all items.\n\n#### What's Deleted\n---\n\n##### `GET` /service-api/v1/wallet/admin/{userId}/paymentcards\n\
    \n> Returns available payment card details for user, optionally filtered by nameOnCard.\n\
    \n##### `POST` /service-api/v1/wallet/admin/{userId}/paymentcards\n\n> Adds a\
    \ payment card to the user's wallet.\n\n##### `GET` /service-api/v1/wallet/admin/{userId}/paymentcards/{cardId}\n\
    \n> Returns details of a specific payment card.\n\n##### `DELETE` /service-api/v1/wallet/admin/{userId}/paymentcards/{cardId}\n\
    \n> Deletes a payment card with a given id.\n\n##### `GET` /service-api/v1/testQuery/required-boolean-query-param\n\
    \n\n## 1.1.0-SNAPSHOT - 1.1.0-SNAPSHOT\n**Note:** API has incompatible changes!!\n\
    #### What's New\n---\n\n##### `GET` /client-api/v1/wallet/paymentcards\n\n> Returns\
    \ available payment card details for user, optionally filtered by nameOnCard.\n\
    \n##### `POST` /client-api/v1/wallet/paymentcards\n\n> Adds a payment card to\
    \ the user's wallet.\n\n##### `GET` /client-api/v1/wallet/paymentcards/{cardId}\n\
    \n> Returns details of a specific payment card.\n\n##### `DELETE` /client-api/v1/wallet/paymentcards/{cardId}\n\
    \n> Deletes a payment card with a given id.\n\n##### `GET` /client-api/v1/bbt/build-info\n\
    \n> Build Information.\n\n##### `PATCH` /client-api/v1/patch\n\n> patch\n\n#####\
    \ `GET` /client-api/v1/test/required-boolean-query-param\n\n\n##### `GET` /client-api/v1/test/values\n\
    \n\n##### `GET` /client-api/v1/test/headers\n\n\n##### `GET` /client-api/v1/test/date-query-params\n\
    \n\n#### What's Deleted\n---\n\n##### `GET` /integration-api/v1/items\n\n> Retrieve\
    \ list of all items.\n\n## 1.1.0-SNAPSHOT - 1.2.0-SNAPSHOT\n**Note:** API has\
    \ incompatible changes!!\n#### What's New\n---\n\n##### `GET` /service-api/v1/wallet/admin/{userId}/paymentcards\n\
    \n> Returns available payment card details for user, optionally filtered by nameOnCard.\n\
    \n##### `POST` /service-api/v1/wallet/admin/{userId}/paymentcards\n\n> Adds a\
    \ payment card to the user's wallet.\n\n##### `GET` /service-api/v1/wallet/admin/{userId}/paymentcards/{cardId}\n\
    \n> Returns details of a specific payment card.\n\n##### `DELETE` /service-api/v1/wallet/admin/{userId}/paymentcards/{cardId}\n\
    \n> Deletes a payment card with a given id.\n\n##### `GET` /service-api/v1/testQuery/required-boolean-query-param\n\
    \n\n#### What's Deleted\n---\n\n##### `GET` /client-api/v1/wallet/paymentcards\n\
    \n> Returns available payment card details for user, optionally filtered by nameOnCard.\n\
    \n##### `POST` /client-api/v1/wallet/paymentcards\n\n> Adds a payment card to\
    \ the user's wallet.\n\n##### `GET` /client-api/v1/wallet/paymentcards/{cardId}\n\
    \n> Returns details of a specific payment card.\n\n##### `DELETE` /client-api/v1/wallet/paymentcards/{cardId}\n\
    \n> Deletes a payment card with a given id.\n\n##### `GET` /client-api/v1/bbt/build-info\n\
    \n> Build Information.\n\n##### `PATCH` /client-api/v1/patch\n\n> patch\n\n#####\
    \ `GET` /client-api/v1/test/required-boolean-query-param\n\n\n##### `GET` /client-api/v1/test/values\n\
    \n\n##### `GET` /client-api/v1/test/headers\n\n\n##### `GET` /client-api/v1/test/date-query-params\n\
    \n\n"
  version: 1.2.0-SNAPSHOT
  x-logo:
    altText: Backbase
    url: http://www.backbase.com/wp-content/uploads/2017/04/backbase-logo-png.png
servers:
- url: /raml-service/
  description: The server
tags:
- name: wallet test service api
paths:
  /service-api/v1/wallet/admin/{userId}/paymentcards:
    summary: Payment Cards
    description: No description available
    get:
      tags:
      - wallet
      summary: "Returns available payment card details for user, optionally filtered\
        \ by nameOnCard."
      description: "Returns available payment card details for user, optionally filtered\
        \ by nameOnCard"
      operationId: getPaymentCards
      parameters:
      - name: userId
        in: path
        description: No description available
        required: true
        style: simple
        explode: false
        schema:
          type: string
        examples:
          example:
            summary: example
      - name: nameOnCard
        in: query
        description: "Filter by the cardholder's name (case-insensitive), can be the\
          \ first one or more characters of one of the words/names"
        required: false
        style: form
        explode: true
        schema:
          type: string
        examples:
          example:
            summary: example
            value: Smi
      - name: dateTimeOnly
        in: query
        description: Creation date in datetime-only format
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        examples:
          example:
            summary: example
            value: 2017-10-04T14:54:36
      - name: dateTime
        in: query
        description: Creation date in Zoned RFC3339 Date-time format
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        examples:
          example:
            summary: example
            value: 2017-10-04T14:54:36Z
      - name: dateTime2616
        in: query
        description: Zoned RFC2616 Date-time param example
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        examples:
          example:
            summary: example
            value: "Wed, 4 Jul 2001 12:08:56 PDT"
      - name: date
        in: query
        description: Date-only param example
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        examples:
          example:
            summary: example
            value: 2017-10-04
      - name: time
        in: query
        description: time-only param example
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        examples:
          example:
            summary: example
            value: 14:54:36
      - name: orderBy
        in: query
        description: "Order by field: nameOnCard\n"
        required: false
        style: form
        explode: true
        schema:
          type: string
        examples:
          example:
            summary: example
      - name: direction
        in: query
        description: Direction
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: DESC
          enum:
          - ASC
          - DESC
        examples:
          example:
            summary: example
      responses:
        "200":
          description: No description available
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
              examples:
                example:
                  value:
                  - id: a5b0fe7d-c4dd-40a7-bd80-dfc7869327e1
                    pan: "5434111122223333"
                    cvc: "123"
                    startDate: "0116"
                    expiryDate: "1219"
                    nameOnCard: Mr Timmy Tester
                    creationDate: 2011-05-30T12:13:14+03:00
                    balance:
                      amount: "2001"
                      currencyCode: EUR
                    apr: 12.75
                  - id: d593c212-70ad-41a6-a547-d5d9232414cb
                    pan: "5434111122224444"
                    cvc: "101"
                    startDate: "0216"
                    expiryDate: "0120"
                    nameOnCard: Mr Timmothy Tester
                    creationDate: 2011-05-30T12:13:14+03:00
                    balance:
                      amount: "4.4399999999999995"
                      currencyCode: GBP
                    apr: 12.75
                  - id: 9635966b-28e9-4479-8121-bb7bc9beeb62
                    pan: "5434121212121212"
                    cvc: "121"
                    startDate: "0115"
                    expiryDate: "1218"
                    nameOnCard: Mr Timmy Tester
                    creationDate: 2011-05-30T12:13:14+03:00
                    balance:
                      amount: "1981"
                      currencyCode: EUR
                    apr: 12.75
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
              examples:
                example:
                  value:
                    message: Bad Request
                    errors:
                    - message: "Value Exceeded. Must be between {min} and {max}."
                      key: common.api.shoesize
                      context:
                        max: "50"
                        min: "1"
        "406":
          description: NotAcceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_406'
              examples:
                example:
                  value:
                    message: Could not find acceptable representation
                    supportedMediaTypes:
                    - application/json
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
              examples:
                example:
                  value:
                    message: Description of error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: "Resource access denied due to an insufficient user\
                        \ quota of {quota}."
                      key: common.api.quota
                      context:
                        quota: someQuota
        "415":
          description: UnsupportedMediaType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_415'
              examples:
                example:
                  value:
                    message: Unsupported media type.
                    errors:
                    - message: "The request entity has a media type {mediaType} which\
                        \ the resource does not support."
                      key: common.api.mediaType
                      context:
                        mediaType: application/javascript
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
              examples:
                example:
                  value:
                    message: Resource not found.
                    errors:
                    - message: "Unable to find the resource requested resource: {resource}."
                      key: common.api.resource
                      context:
                        resource: aResource
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: Resource access denied due to invalid credentials.
                      key: common.api.token
                      context:
                        accessToken: expired
    post:
      tags:
      - wallet
      summary: Adds a payment card to the user's wallet.
      description: Adds a payment card to the user's wallet
      operationId: postPaymentCards
      parameters:
      - name: userId
        in: path
        description: No description available
        required: true
        style: simple
        explode: false
        schema:
          type: string
        examples:
          example:
            summary: example
      - name: X-Request-Id
        in: header
        description: Correlates HTTP requests between a client and server.
        required: false
        style: simple
        explode: false
        schema:
          type: string
        examples:
          example:
            summary: example
            value: f058ebd6-02f7-4d3f-942e-904344e8cde5
      requestBody:
        description: Adds a payment card to the user's wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
            examples:
              example:
                value:
                  id: a5b0fe7d-c4dd-40a7-bd80-dfc7869327e1
                  pan: "5434111122223333"
                  cvc: "123"
                  startDate: "0116"
                  expiryDate: "1219"
                  nameOnCard: Mr Timmy Tester
                  creationDate: 2011-05-30T12:13:14+03:00
                  balance:
                    amount: "1000"
                    currencyCode: EUR
                  apr: 12.75
      responses:
        "201":
          description: request to create payment card accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
              examples:
                example:
                  value:
                    id: a5b0fe7d-c4dd-40a7-bd80-dfc7869327e1
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
              examples:
                example:
                  value:
                    message: Bad Request
                    errors:
                    - message: "Value Exceeded. Must be between {min} and {max}."
                      key: common.api.shoesize
                      context:
                        max: "50"
                        min: "1"
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
              examples:
                example:
                  value:
                    message: Description of error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: "Resource access denied due to an insufficient user\
                        \ quota of {quota}."
                      key: common.api.quota
                      context:
                        quota: someQuota
        "415":
          description: UnsupportedMediaType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_415'
              examples:
                example:
                  value:
                    message: Unsupported media type.
                    errors:
                    - message: "The request entity has a media type {mediaType} which\
                        \ the resource does not support."
                      key: common.api.mediaType
                      context:
                        mediaType: application/javascript
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
              examples:
                example:
                  value:
                    message: Resource not found.
                    errors:
                    - message: "Unable to find the resource requested resource: {resource}."
                      key: common.api.resource
                      context:
                        resource: aResource
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: Resource access denied due to invalid credentials.
                      key: common.api.token
                      context:
                        accessToken: expired
  /service-api/v1/wallet/admin/{userId}/paymentcards/{cardId}:
    summary: Payment Card
    description: No description available
    get:
      tags:
      - wallet
      summary: Returns details of a specific payment card.
      description: Returns details of a specific payment card
      operationId: getPaymentCard
      parameters:
      - name: cardId
        in: path
        description: No description available
        required: true
        style: simple
        explode: false
        schema:
          type: string
        examples:
          example:
            summary: example
      - name: userId
        in: path
        description: No description available
        required: true
        style: simple
        explode: false
        schema:
          type: string
        examples:
          example:
            summary: example
      responses:
        "200":
          description: No description available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body'
              examples:
                example:
                  value:
                    id: a5b0fe7d-c4dd-40a7-bd80-dfc7869327e1
                    pan: "5434111122223333"
                    cvc: "123"
                    startDate: "0116"
                    expiryDate: "1219"
                    nameOnCard: Mr Timmy Tester
                    creationDate: 2011-05-30T12:13:14+03:00
                    balance:
                      amount: "1000"
                      currencyCode: EUR
                    apr: 12.75
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
              examples:
                example:
                  value:
                    message: Bad Request
                    errors:
                    - message: "Value Exceeded. Must be between {min} and {max}."
                      key: common.api.shoesize
                      context:
                        max: "50"
                        min: "1"
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
              examples:
                example:
                  value:
                    message: Description of error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: "Resource access denied due to an insufficient user\
                        \ quota of {quota}."
                      key: common.api.quota
                      context:
                        quota: someQuota
        "415":
          description: UnsupportedMediaType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_415'
              examples:
                example:
                  value:
                    message: Unsupported media type.
                    errors:
                    - message: "The request entity has a media type {mediaType} which\
                        \ the resource does not support."
                      key: common.api.mediaType
                      context:
                        mediaType: application/javascript
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
              examples:
                example:
                  value:
                    message: Resource not found.
                    errors:
                    - message: "Unable to find the resource requested resource: {resource}."
                      key: common.api.resource
                      context:
                        resource: aResource
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: Resource access denied due to invalid credentials.
                      key: common.api.token
                      context:
                        accessToken: expired
    delete:
      tags:
      - wallet
      summary: Deletes a payment card with a given id.
      description: Deletes a payment card with a given id
      operationId: deletePaymentCard
      parameters:
      - name: cardId
        in: path
        description: No description available
        required: true
        style: simple
        explode: false
        schema:
          type: string
        examples:
          example:
            summary: example
      - name: userId
        in: path
        description: No description available
        required: true
        style: simple
        explode: false
        schema:
          type: string
        examples:
          example:
            summary: example
      responses:
        "204":
          description: Payment card is succesfully deleted
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
              examples:
                example:
                  value:
                    message: Bad Request
                    errors:
                    - message: "Value Exceeded. Must be between {min} and {max}."
                      key: common.api.shoesize
                      context:
                        max: "50"
                        min: "1"
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
              examples:
                example:
                  value:
                    message: Description of error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: "Resource access denied due to an insufficient user\
                        \ quota of {quota}."
                      key: common.api.quota
                      context:
                        quota: someQuota
        "415":
          description: UnsupportedMediaType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_415'
              examples:
                example:
                  value:
                    message: Unsupported media type.
                    errors:
                    - message: "The request entity has a media type {mediaType} which\
                        \ the resource does not support."
                      key: common.api.mediaType
                      context:
                        mediaType: application/javascript
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
              examples:
                example:
                  value:
                    message: Resource not found.
                    errors:
                    - message: "Unable to find the resource requested resource: {resource}."
                      key: common.api.resource
                      context:
                        resource: aResource
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: Resource access denied due to invalid credentials.
                      key: common.api.token
                      context:
                        accessToken: expired
  /service-api/v1/testQuery/required-boolean-query-param:
    summary: required boolean query param
    description: arbitrary tests
    get:
      tags:
      - testQuery
      description: No description available
      operationId: getrequiredBooleanQueryParam
      parameters:
      - name: bool
        in: query
        description: Required boolean parameter with no default value
        required: true
        style: form
        explode: true
        schema:
          type: boolean
        examples:
          example:
            summary: example
            value: false
      responses:
        "200":
          description: No description available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
              examples:
                example:
                  value:
                    message: Bad Request
                    errors:
                    - message: "Value Exceeded. Must be between {min} and {max}."
                      key: common.api.shoesize
                      context:
                        max: "50"
                        min: "1"
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
              examples:
                example:
                  value:
                    message: Description of error
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: "Resource access denied due to an insufficient user\
                        \ quota of {quota}."
                      key: common.api.quota
                      context:
                        quota: someQuota
        "415":
          description: UnsupportedMediaType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_415'
              examples:
                example:
                  value:
                    message: Unsupported media type.
                    errors:
                    - message: "The request entity has a media type {mediaType} which\
                        \ the resource does not support."
                      key: common.api.mediaType
                      context:
                        mediaType: application/javascript
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
              examples:
                example:
                  value:
                    message: Resource not found.
                    errors:
                    - message: "Unable to find the resource requested resource: {resource}."
                      key: common.api.resource
                      context:
                        resource: aResource
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
              examples:
                example:
                  value:
                    message: Access to requested resource denied.
                    errors:
                    - message: Resource access denied due to invalid credentials.
                      key: common.api.token
                      context:
                        accessToken: expired
components:
  schemas:
    BadRequestError:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.BadRequestException
    BbAccessControl:
      required:
      - function
      - privilege
      - resource
      type: object
      properties:
        resource:
          type: string
          description: "Resource being protected, e.g. 'User'"
        function:
          type: string
          description: "Business function, e.g. 'Manage Users'"
        privilege:
          type: string
          description: "The privilege required, e.g. 'view'"
    BbApiDeprecation:
      required:
      - deprecatedFromVersion
      - description
      - reason
      - removedFromVersion
      type: object
      properties:
        deprecatedFromVersion:
          type: string
          description: Version of the product from which the endpoint has been deprecated
            and should no longer be used
          deprecated: true
        removedFromVersion:
          type: string
          description: Version of the product from which the API endpoint will be
            removed
        reason:
          type: string
          description: The reason the API endpoint was deprecated
          deprecated: true
        description:
          type: string
          description: "Any further information, e.g. migration information"
    Currency:
      title: Monetary Amount
      required:
      - amount
      - currencyCode
      type: object
      properties:
        amount:
          type: string
          description: The amount in the specified currency
          x-java-type: java.math.BigDecimal
        currencyCode:
          pattern: "^[A-Z]{3}$"
          type: string
          description: The alpha-3 code (complying with ISO 4217) of the currency
            that qualifies the amount
      description: Schema defining monetary amount in given currency.
      x-java-type: com.backbase.rest.spec.common.types.Currency
    ErrorItem:
      type: object
      properties:
        message:
          type: string
          description: Default Message. Any further information.
        key:
          type: string
          description: "{capability-name}.api.{api-key-name}. For generated validation\
            \ errors this is the path in the document the error resolves to. e.g.\
            \ object name + '.' + field"
        context:
          type: object
          description: Context can be anything used to construct localised messages.
          x-java-type: "java.util.Map<String,String>"
      description: A validation error
    ForbiddenError:
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.ForbiddenException
    InternalServerError:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Further Information
      description: Represents HTTP 500 Internal Server Error
      x-java-type: com.backbase.buildingblocks.presentation.errors.InternalServerErrorException
    NotAcceptableError:
      type: object
      properties:
        message:
          type: string
        supportedMediaTypes:
          type: array
          description: List of supported media types for this endpoint
          items:
            type: string
      x-java-type: com.backbase.buildingblocks.presentation.errors.NotAcceptableException
    NotFoundError:
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.NotFoundException
    ObjectWrappingException:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
      x-java-type: com.backbase.buildingblocks.test.exceptions.ObjectWrappingException
    PaymentCard:
      required:
      - cvc
      - expiryDate
      - id
      - nameOnCard
      - pan
      - startDate
      type: object
      properties:
        id:
          type: string
        pan:
          maxLength: 19
          type: string
          description: "Must be sixteen digits, optionally in blocks of 4 separated\
            \ by a dash"
        cvc:
          maxLength: 3
          minLength: 3
          type: string
          description: Card Verification Code
        startDate:
          pattern: "^(0[1-9]|1[0-2])/?([0-9]{4}|[0-9]{2})$"
          type: string
          description: "Must be in one of these four formats: MM/YY MMYY MMYYYY MM/YYYY"
        expiryDate:
          pattern: "^(0[1-9]|1[0-2])/?([0-9]{4}|[0-9]{2})$"
          type: string
          description: "Must be in one of these four formats: MM/YY MMYY MMYYYY MM/YYYY"
        nameOnCard:
          type: string
        creationDate:
          type: string
          format: date-time
        balance:
          $ref: '#/components/schemas/Monetary Amount'
        apr:
          type: number
          x-java-type: java.math.BigDecimal
        cardtype:
          type: string
          enum:
          - CREDIT
          - DEBIT
          - PREPAID
      x-java-type: com.backbase.buildingblocks.test.data.PaymentCard
    PaymentCards:
      type: array
      items:
        $ref: '#/components/schemas/inline_response_200'
    PaymentCardsPostResponseBody:
      type: object
      properties:
        id:
          type: string
      example:
        id: a5b0fe7d-c4dd-40a7-bd80-dfc7869327e1
    RequiredbooleanqueryparamGetResponseBody:
      type: object
      properties:
        message:
          type: string
    TestHeadersResponseBody:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/TestHeadersResponseBody_requests'
      x-java-type: com.backbase.buildingblocks.test.data.TestHeadersResponse
    UnauthorizedAltError:
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.UnauthorizedException
    UnauthorizedError:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    UnsupportedMediaTypeError:
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.UnsupportedMediaTypeException
    Monetary Amount:
      required:
      - amount
      - currencyCode
      type: object
      properties:
        amount:
          type: string
          description: The amount in the specified currency
          x-java-type: java.math.BigDecimal
        currencyCode:
          pattern: "^[A-Z]{3}$"
          type: string
          description: The alpha-3 code (complying with ISO 4217) of the currency
            that qualifies the amount
      description: Schema defining monetary amount in given currency.
    inline_response_200:
      required:
      - cvc
      - expiryDate
      - id
      - nameOnCard
      - pan
      - startDate
      type: object
      properties:
        id:
          type: string
        pan:
          maxLength: 19
          type: string
          description: "Must be sixteen digits, optionally in blocks of 4 separated\
            \ by a dash"
        cvc:
          maxLength: 3
          minLength: 3
          type: string
          description: Card Verification Code
        startDate:
          pattern: "^(0[1-9]|1[0-2])/?([0-9]{4}|[0-9]{2})$"
          type: string
          description: "Must be in one of these four formats: MM/YY MMYY MMYYYY MM/YYYY"
        expiryDate:
          pattern: "^(0[1-9]|1[0-2])/?([0-9]{4}|[0-9]{2})$"
          type: string
          description: "Must be in one of these four formats: MM/YY MMYY MMYYYY MM/YYYY"
        nameOnCard:
          type: string
        creationDate:
          type: string
          format: date-time
        balance:
          $ref: '#/components/schemas/Monetary Amount'
        apr:
          type: number
          x-java-type: java.math.BigDecimal
        cardtype:
          type: string
          enum:
          - CREDIT
          - DEBIT
          - PREPAID
      x-java-type: com.backbase.buildingblocks.test.data.PaymentCard
    inline_response_400:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.BadRequestException
    inline_response_406:
      type: object
      properties:
        message:
          type: string
        supportedMediaTypes:
          type: array
          description: List of supported media types for this endpoint
          items:
            type: string
      x-java-type: com.backbase.buildingblocks.presentation.errors.NotAcceptableException
    inline_response_500:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: Further Information
      description: Represents HTTP 500 Internal Server Error
      x-java-type: com.backbase.buildingblocks.presentation.errors.InternalServerErrorException
    inline_response_403:
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.ForbiddenException
    inline_response_415:
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.UnsupportedMediaTypeException
    inline_response_404:
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.NotFoundException
    inline_response_401:
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/BadRequestError_errors'
      x-java-type: com.backbase.buildingblocks.presentation.errors.UnauthorizedException
    body:
      required:
      - cvc
      - expiryDate
      - id
      - nameOnCard
      - pan
      - startDate
      type: object
      properties:
        id:
          type: string
        pan:
          maxLength: 19
          type: string
          description: "Must be sixteen digits, optionally in blocks of 4 separated\
            \ by a dash"
        cvc:
          maxLength: 3
          minLength: 3
          type: string
          description: Card Verification Code
        startDate:
          pattern: "^(0[1-9]|1[0-2])/?([0-9]{4}|[0-9]{2})$"
          type: string
          description: "Must be in one of these four formats: MM/YY MMYY MMYYYY MM/YYYY"
        expiryDate:
          pattern: "^(0[1-9]|1[0-2])/?([0-9]{4}|[0-9]{2})$"
          type: string
          description: "Must be in one of these four formats: MM/YY MMYY MMYYYY MM/YYYY"
        nameOnCard:
          type: string
        creationDate:
          type: string
          format: date-time
        balance:
          $ref: '#/components/schemas/Monetary Amount'
        apr:
          type: number
          x-java-type: java.math.BigDecimal
        cardtype:
          type: string
          enum:
          - CREDIT
          - DEBIT
          - PREPAID
      x-java-type: com.backbase.buildingblocks.test.data.PaymentCard
    inline_response_201:
      type: object
      properties:
        id:
          type: string
      example:
        id: a5b0fe7d-c4dd-40a7-bd80-dfc7869327e1
    inline_response_200_1:
      type: object
      properties:
        message:
          type: string
    BadRequestError_errors:
      type: object
      properties:
        message:
          type: string
          description: Default Message. Any further information.
        key:
          type: string
          description: "{capability-name}.api.{api-key-name}. For generated validation\
            \ errors this is the path in the document the error resolves to. e.g.\
            \ object name + '.' + field"
        context:
          type: object
          description: Context can be anything used to construct localised messages.
          x-java-type: "java.util.Map<String,String>"
      description: A validation error
    TestHeadersResponseBody_requests:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        headers:
          type: object
          x-java-type: "java.util.Map<String, Object>"
x-compared: true

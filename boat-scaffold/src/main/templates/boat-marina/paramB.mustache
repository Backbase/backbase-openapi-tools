<div class="request-body" id="requests-{{baseName}}-{{nickname}}-{{code}}-wrapper" style='margin-bottom: 10px;'>
    <p class="marked">{{description}}</p>
    <div class="requests-wrapper">
        <div class="examples-tab-wrapper">
            <div class="exampleStyle">
                <div class="left-side" id="requests-{{baseName}}-{{nickname}}-{{code}}-schema" style="width: calc((100% + 64px) * 0.6 - 32px)" >
                    <div id="requests-{{baseName}}-{{nickname}}-{{code}}-schema-data">
                        <script>
                            $(document).ready(function() {
                                var schemaWrapper = {{{jsonSchema}}};
                                var schema = findNode('schema', schemaWrapper.content).schema;

                                if (!schema) {
                                    schema = schemaWrapper.schema;
                                }
                                if (schema.$ref != null) {
                                    schema = defsParser.$refs.get(schema.$ref);
                                    if (schema.type === 'array' && schema.items != null && schema.items.$ref != null) {
                                        schema.items = defsParser.$refs.get(schema.items.$ref);


                                    }
                                }else if (schema.type === 'array' && schema.items != null && schema.items.$ref != null) {
                                    schema.items = defsParser.$refs.get(schema.items.$ref);
                                } else {
                                    schemaWrapper.definitions = Object.assign({}, defs);
                                    $RefParser.dereference(schemaWrapper).catch(function(err) {
                                        console.log(err);
                                    });
                                }

                                if (schema && schema.allOf) {
                                    schema.allOf = schema.allOf.map( i =>  i.$ref ? defsParser.$refs.get(i.$ref) : i).filter(Boolean);
                                    schema = mergeAllOf(schema,  {
                                        resolvers: {
                                            defaultResolver: mergeAllOf.options.resolvers.title
                                        }
                                    });
                                }

                                if (schema.items && schema.items.allOf) {
                                    schema.items.allOf = schema.items.allOf.map( i =>  i.$ref ? defsParser.$refs.get(i.$ref) : i).filter(Boolean);
                                    schema.items = mergeAllOf(schema.items,  {
                                        resolvers: {
                                            defaultResolver: mergeAllOf.options.resolvers.title
                                        }
                                    });
                                }

                                var view = new JSONSchemaView(schema,2,{isBodyParam: true});
                                $('#requests-{{baseName}}-{{nickname}}-{{code}}-schema-data-input').val(JSON.stringify(schema));
                                var result = $('#requests-{{baseName}}-{{nickname}}-{{code}}-schema');
                                result.empty();
                                result.append(view.render());
                            });
                        </script>
                    </div>
                    <input id='requests-{{baseName}}-{{nickname}}-{{code}}-schema-data-input' type='hidden' value=''/>
                </div>

                {{#hasExamples}}
                    <div class="dropdown-examples">
                        <h2>Request examples</h2>
                        <label>
                            <span>Example</span>
                            <select class="example-dropdown-select">
                                {{#examples}}
                                    <option data-toggle="tab"
                                            value="#requests-{{baseName}}-{{nickname}}-{{code}}-example-{{key}}">{{name}} - {{contentType}}</option>
                                {{/examples}}
                            </select>
                        </label>
                        {{#examples}}
                            <div class="example-dropdown-value"
                                 id="requests-{{baseName}}-{{nickname}}-{{code}}-example-{{key}}">
                                {{#isJson}}
                                    <div class="buttons-wrapper">
                                        <button data-action="copy"> Copy </button> <button data-action="expand"> Expand all </button><button data-action="collapse"> Collapse all </button>
                                    </div>
                                    <div class="json-viewer ">{{{prettyPrintValue}}}</div>
                                {{/isJson}}
                                {{^isJson}}
                                    <pre class="prettyprint language-json"><code class="json">{{{prettyPrintValue}}}</code></pre>
                                {{/isJson}}
                            </div>
                        {{/examples}}

                    </div>
                {{/hasExamples}}
            </div>
        </div>
    </div>
</div>
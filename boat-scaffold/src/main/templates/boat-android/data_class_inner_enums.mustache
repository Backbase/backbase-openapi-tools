  {{#hasEnums}}
  {{#vars}}
  {{#isEnum}}
      /**
       * {{{description}}}
       * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
       */
      enum class {{{nameInCamelCase}}}(val value: {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}kotlin.String{{/isContainer}}){
      {{#allowableValues}}
      {{#enumVars}}
          {{#moshi}}
          @Json(name = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}{{#-last}};{{/-last}}
          {{/moshi}}
          {{#gson}}
          @SerializedName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}{{#-last}};{{/-last}}
          {{/gson}}
      {{/enumVars}}
      {{/allowableValues}}

          /**
           * This override toString avoids using the enum var name and uses the actual api value instead.
           * In cases the var name and value are different, the client would send incorrect enums to the server.
           */
          override fun toString(): String {
              return value{{^isString}}.toString(){{/isString}}
          }
      }
  {{/isEnum}}
  {{/vars}}
  {{/hasEnums}}

  {{#parentModel}}{{>data_class_inner_enums}}{{/parentModel}}
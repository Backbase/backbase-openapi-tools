//
// CodableHelper.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class CodableHelper {

    private static var customDateTimeFormatter: DateFormatter?
    private static var defaultDateTimeFormatter: DateFormatter = OpenISO8601DateFormatter()
    private static var customDateFormatter: DateFormatter?
    private static var defaultDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        return formatter
    }()
    private static var customJSONDecoder: JSONDecoder?
    private static var defaultJSONDecoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(CodableHelper.dateTimeFormatter)
        return decoder
    }()
    private static var customJSONEncoder: JSONEncoder?
    private static var defaultJSONEncoder: JSONEncoder = {
       let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(CodableHelper.dateTimeFormatter)
        encoder.outputFormatting = .prettyPrinted
        return encoder
    }()

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} static var dateTimeFormatter: DateFormatter {
        get { return self.customDateTimeFormatter ?? self.defaultDateTimeFormatter }
        set { self.customDateTimeFormatter = newValue }
    }
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} static var dateFormatter: DateFormatter {
        get { return self.customDateFormatter ?? self.defaultDateFormatter }
        set { self.customDateFormatter = newValue }
    }
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} static var jsonDecoder: JSONDecoder {
        get { return self.customJSONDecoder ?? self.defaultJSONDecoder }
        set { self.customJSONDecoder = newValue }
    }
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} static var jsonEncoder: JSONEncoder {
        get { return self.customJSONEncoder ?? self.defaultJSONEncoder }
        set { self.customJSONEncoder = newValue }
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class func decodeDate<T: CodingKey>(from container: KeyedDecodingContainer<T>,
                                             forKey: T) throws -> Date {
        let dateStr = try container.decode(String.self, forKey: forKey)
        return try dateFormatter.date(from: dateStr).unwrap(parsed: dateStr,
                                                            for: forKey,
                                                            in: container)
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class func decodeDateIfPresent<T: CodingKey>(from container: KeyedDecodingContainer<T>,
                                             forKey: T) throws -> Date? {
        guard let dateStr = try container.decodeIfPresent(String.self, forKey: forKey) else {
            return nil
        }
        return try dateFormatter.date(from: dateStr).unwrap(parsed: dateStr,
                                                            for: forKey,
                                                            in: container)
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class func decodeDateTime<T: CodingKey>(from container: KeyedDecodingContainer<T>,
                                             forKey: T) throws -> Date {
        let dateStr = try container.decode(String.self, forKey: forKey)
        return try dateTimeFormatter.date(from: dateStr).unwrap(parsed: dateStr,
                                                                for: forKey,
                                                                in: container)
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class func decodeDateTimeIfPresent<T: CodingKey>(from container: KeyedDecodingContainer<T>,
                                             forKey: T) throws -> Date? {
        guard let dateStr = try container.decodeIfPresent(String.self, forKey: forKey) else {
            return nil
        }
        return try dateTimeFormatter.date(from: dateStr).unwrap(parsed: dateStr,
                                                                for: forKey,
                                                                in: container)
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class func decode<T>(_ type: T.Type, from data: Data) -> Result<T, Error> where T: Decodable {
        return Result { try self.jsonDecoder.decode(type, from: data) }
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class func encode<T>(_ value: T) -> Result<Data, Error> where T: Encodable {
        return Result { try self.jsonEncoder.encode(value) }
    }
}

private extension Optional where Wrapped == Date {
    func unwrap<T: CodingKey>(parsed dateStr: String, for key: T, in container: KeyedDecodingContainer<T>) throws -> Wrapped {
        switch self {
        case .some(let w):
            return w
        case .none:
            throw DecodingError.dataCorruptedError(forKey: key,
                                                   in: container,
                                                   debugDescription: "Cannot decode date string \(dateStr)")
        }
    }
}
name: Release

on:
  push:
    branches:
      - release

jobs:
#  test:
#    if: "!contains(github.event.head_commit.message, '[ci skip]')"
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout project
#        uses: actions/checkout@v2
#      - name: Setup Build Cache
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-m2
#          restore-keys: |
#            ${{ runner.os }}-m2
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#      - name: Build & Test
#        run: mvn -B test
#  sonar:
#    if: "!contains(github.event.head_commit.message, '[ci skip]')"
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout project
#      uses: actions/checkout@v2
#    - name: Setup Build Cache
#      uses: actions/cache@v1
#      with:
#        path: ~/.m2/repository
#        key: ${{ runner.os }}-m2
#        restore-keys: |
#          ${{ runner.os }}-m2
#    - name: Set up JDK 11
#      uses: actions/setup-java@v1
#      with:
#        java-version: 11
#    - name: Build and Analyze
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#      run: mvn -B verify sonar:sonar

  publish:
    if: "!contains(github.event.head_commit.message, '[version bump]') && contains(github.ref, 'release')"
    runs-on: ubuntu-latest
#    needs: [test, sonar]
    steps:
    - name: Checkout project
      uses: actions/checkout@v2

    - name: Setup Build Cache
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2
        restore-keys: |
          ${{ runner.os }}-m2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
    - name: Get version from POM without SNAPSHOT
      run: |
        VERSION_PARTS=($(mvn help:evaluate -Dexpression=project.version -q -DforceStdout |  cut -d- -f1 |  tr "." "\n"))
        echo "MAJOR=${VERSION_PARTS[0]}" >> $GITHUB_ENV
        echo "MINOR=${VERSION_PARTS[1]}" >> $GITHUB_ENV
        echo "PATCH=${VERSION_PARTS[2]}" >> $GITHUB_ENV
    - name: Setup release version
      run: |
        NEW_VERSION="$((MAJOR)).$((MINOR)).$((PATCH))"
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
    - name: Update POM Version
      run: |
        echo "New version  is: $NEW_VERSION"
        mvn versions:set -DnewVersion=${NEW_VERSION} -DgenerateBackupPoms=false -B

#    - name: Build and Publish
#      uses: samuelmeuli/action-maven-publish@v1
#      with:
#        maven_args: "-DskipTests=true"
#        gpg_private_key: ${{ secrets.gpg_private_key }}
#        gpg_passphrase: ${{ secrets.gpg_passphrase }}
#        nexus_username: ${{ secrets.nexus_username }}
#        nexus_password: ${{ secrets.nexus_password }}
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit files
      run: |
        git commit -m "[version bump]" -a
        git tag -a release-$NEW_VERSION -m "[version bump]"
        git push

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: Checkout Main Branch
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"

    - name: Bump And Update POM Version to new Development version
      run: |
        NEW_VERSION="$((MAJOR)).$((MINOR+1)).$((PATCH))-SNAPSHOT"
        echo "New development version is: $NEW_VERSION"
        mvn versions:set -DnewVersion=${NEW_VERSION} -DgenerateBackupPoms=false
        git commit -m "[version bump] Setup new Development Version" -a

    - name: Push Development Version to Main Branch
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main